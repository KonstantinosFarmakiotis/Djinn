#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout (location = 3) in mat4 aInstanceMatrix;
layout (location = 11) in float scale;


// Values that stay constant for the whole mesh.
uniform mat4 VP;
uniform mat4 M;
uniform int obj_id;

vec4 function(vec4 position) {
    position.x = sqrt(position.y - 1.0) + 0.85;
    position.z = sqrt(position.y - 1.0) + 0.3;

    return position;
}

void main()
{
    vec4 displacement=vec4(0);
    float compression;

    //random obj
    if (obj_id==0){
        gl_Position =  VP * M * vec4(vertexPosition_modelspace, 1);
    }


    //djinn obj
    else if (obj_id==1) {
        vec3 vertex_position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
        if (vertex_position_worldspace.y<3 && vertex_position_worldspace.y>0.5){
            displacement+= function(vec4(vertex_position_worldspace.x, vertex_position_worldspace.y,vertex_position_worldspace.z,0))*vec4(1,0,1,0);
            compression = 0.25*vertex_position_worldspace.y;
        }
    
        else if (vertex_position_worldspace.y<0.5){
            compression=0;
        }

        else {
            displacement = function(vec4(vertex_position_worldspace.x, 3,vertex_position_worldspace.z,0))*vec4(1,0,1,0);
            compression = 0.75;
        }

        gl_Position =  VP * (M * vec4(vertexPosition_modelspace, 1) * vec4(compression,1,compression,1) + displacement);
   }


   //particle obj
   else {
        gl_Position =  VP * aInstanceMatrix * vec4(vertexPosition_modelspace * scale, 1);
   }

}