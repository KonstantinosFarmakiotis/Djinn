#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;


uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform mat4 lightVP;

out vec3 vertex_position_worldspace;
out vec3 vertex_position_cameraspace;
out vec3 vertex_normal_cameraspace;
out vec2 vertex_UV;
out vec4 vertex_position_lightspace;

vec4 function(vec4 position) {
    position.x = sqrt(position.y - 1.0) + 0.85;
    position.z = sqrt(position.y - 1.0) + 0.3;

    return position;
}

void main() {

    vec4 displacement=vec4(0);
    float compression;
    
    vertex_position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
    vertex_position_cameraspace = (V * M * vec4(vertexPosition_modelspace, 1)).xyz;
    vertex_normal_cameraspace = (V * M * vec4(vertexNormal_modelspace, 0)).xyz; 
    vertex_UV = vertexUV;

 

    if (vertex_position_worldspace.y<3 && vertex_position_worldspace.y>0.5){
        displacement+= function(vec4(vertex_position_worldspace.x, vertex_position_worldspace.y,vertex_position_worldspace.z,0))*vec4(1,0,1,0);
        compression = 0.25*vertex_position_worldspace.y;
    }
    
    else if (vertex_position_worldspace.y<0.5){
        compression=0;
    }

    else {
        displacement = function(vec4(vertex_position_worldspace.x, 3,vertex_position_worldspace.z,0))*vec4(1,0,1,0);
        compression = 0.75;
    }

    gl_Position =  P * V * (M * vec4(vertexPosition_modelspace, 1) * vec4(compression,1,compression,1) + displacement);

    vertex_position_lightspace = lightVP * (M * vec4(vertexPosition_modelspace, 1) * vec4(compression,1,compression,1) + displacement);

}